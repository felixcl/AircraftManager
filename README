AIRCRAFT MANAGER

Some aircraft are owned by multiple people, and the need to handle payments between them when they use it, to make sure there is enough money to pay for maintenance and expenses.
Also, aircraft logs are very important because they show the real usage and maintenance of the aircraft, and a complete and credible log increases the value of the aircraft.
Since this information is valuable and should be trusted in a trustless environment, it is perfect for a blockchain, and this contract wants to solve this problem.

The contract represents one aircraft (it should be deployed for each aircraft that we want to manage). Since log entries must be credible, the best way to handle them is to attach a cost to each log.
When someone flies, to be part of the log they need to pay for their flight hours (this solves the problem of paying for the flight and also logging real hours, because you need to pay those hours) 
and when the aircraft has maintenance, this change will also be stored on the blockchain and the payment will occur there. We could also have a maintenance log as a possible extension to this contract.

The project directory is as follows:
It is a truffle project, containing:
./build/contracts: Artifacts from the Truffle build
./contracts: Smart contracts in Solidity
./front: Frontend files using Vuetify and Web3
./migrations: Migration files
./node_modules: npm modules, including openzeppelin libraries (the contract uses SafeMath) and liteserver
./test: Test for the module
./bsconfig.json: Configuration file for liteserver, serving the files in ./front and ./build/contracts artifacts
./truffle-config.json: Configuration file for truffle with development network using Ganache GUI at localhost port 7545

The test aircraft is configured in the file ./migrations/2_deploy_aircraftmanager.js

You need to have a web3 compatible browser or install Metamask add-on before running.

To build and run locally:
$ npm install -g truffle
Then install Ganache GUI from https://www.trufflesuite.com/ganache or you can install ganache-cli with npm install -g ganache-cli but reconfigure port at truffle-config.js file.
Go to the project directory and run:
$ truffle migrate

Then run liteserver and serve the frontend:
$ npm run dev

If you want to run the tests, you can use:
$ truffle test
